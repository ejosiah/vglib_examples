#version 460
#include "models.glsl"
#include "cuckoo_hash_functions.glsl"

layout(local_size_x = 32, local_size_y = 1, local_size_z = 32) in;

layout(push_constant) uniform Constants {
    uint pass;
    uint blocksPerPass;
};
const float scale = 1/32.0;

float densityFunction(vec3 x) {
    float d = -x.y;
    return d;
}


void main() {

    const uint index = pass * blocksPerPass + gl_WorkGroupID.y;
    const uint voxel_id = gl_WorkGroupID.y;

    if(index >= counters.blocks) return;

    vec3 box_center = block[index].aabb;
    const uint key = compute_hash_key(box_center);

    if(skip_block(key)) return;

    const mat4 grid_to_world = camera_info.grid_to_world;
    const vec3 world_position = (grid_to_world * vec4(box_center, 1)).xyz;

    const vec3 origin = world_position - vec3(0.5);
    const ivec3 texOffset = ivec3(1, 0, 1);

    int layers = 33;
    for(int y = 0; y < layers; ++y) {
        ivec3 location = ivec3(gl_LocalInvocationID.x, y, gl_LocalInvocationID.z);
        vec3 position = origin + vec3(location) * scale;
        float density = densityFunction(position);
        imageStore(voxels[voxel_id], location, vec4(density));

        // process last column;
        location = ivec3(gl_WorkGroupSize.x, y, gl_LocalInvocationID.z);
        position = origin + vec3(location) * scale;
        density = densityFunction(position);
        imageStore(voxels[voxel_id], location, vec4(density));

        // process last row
        location = ivec3(gl_LocalInvocationID.x, y, gl_WorkGroupSize.z);
        position = origin + vec3(location) * scale;
        density = densityFunction(position);
        imageStore(voxels[voxel_id], location, vec4(density));

        // process last slice
        location = ivec3(gl_WorkGroupSize.x, y, gl_WorkGroupSize.z);
        position = origin + vec3(location) * scale;
        density = densityFunction(position);
        imageStore(voxels[voxel_id], location, vec4(density));
    }

    barrier();

    if(gl_LocalInvocationIndex == 0) {
        block[index].voxel_id = voxel_id;
    }
}