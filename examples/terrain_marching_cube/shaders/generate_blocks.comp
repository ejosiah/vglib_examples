#version 460
#include "models.glsl"
#include "cuckoo_hash_functions.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

void main() {
    const vec3 aabbMax = camera_info.aabbMax;
    const vec3 aabbMin = camera_info.aabbMin;

    const uvec3 padding = uvec3(2);
    const uvec3 dim = uvec3(aabbMax - aabbMin) + padding;

    const uvec3 gid = uvec3(gl_GlobalInvocationID);
    const vec3 last = vec3(dim - uvec3(1));

//    if(any(greaterThan(gid, last))) return;

    const mat4 grid_to_world = camera_info.grid_to_world;
    const vec4 frustum[6] = camera_info.frustum;
    const vec3 camera_position = camera_info.position;
    const vec3 center_block = floor(camera_position) + vec3(0.5);

    vec4 position = vec4(1);
    position.xyz = center_block + vec3(gid) - vec3(dim)/2;

    const vec3 world_position = (grid_to_world * position).xyz;

//    const uint key = (gid.z * dim.y + gid.y) * dim.x + gid.x;
    const uint key = compute_hash_key(position.xyz);
    if(box_in_frustum_test(frustum, world_position.xyz)) {

        if(skip_block(key)) return;

        uint index = atomicAdd(counters.blocks, 1);

        const vec3 camera_direction = camera_info.direction;
        const float distance_to_cam =  sign(dot(camera_direction, world_position)) * distance(camera_position, world_position);

        distance_to_camera[index] = floatBitsToUint(distance_to_cam);
        block[index].aabb = position.xyz;
    }
}