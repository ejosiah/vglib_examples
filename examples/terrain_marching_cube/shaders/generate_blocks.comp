#version 460
#extension GL_EXT_debug_printf : enable
#include "models.glsl"
#include "cuckoo_hash_functions.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

void main() {
    const vec3 aabbMax = camera_info.aabbMax;
    const vec3 aabbMin = camera_info.aabbMin;

    const uvec3 dim = uvec3(ceil((aabbMax - aabbMin)/BLOCK_SIZE));

    const uvec3 gid = uvec3(gl_GlobalInvocationID);
    const vec3 last = vec3(dim - uvec3(1));

    if(any(greaterThan(gid, last))) return;

    const mat4 grid_to_world = camera_info.grid_to_world;
    const vec4 frustum[6] = camera_info.frustum;
    const vec3 camera_position = aabbMin;
    const vec3 center_block = floor(aabbMin/BLOCK_SIZE) * BLOCK_SIZE
                                + vec3(HALF_BLOCK_SIZE, 0, HALF_BLOCK_SIZE);

    vec4 position = vec4(1);
    position.xyz = center_block + vec3(gid * BLOCK_SIZE);

    const vec3 world_position = (grid_to_world * position).xyz;

    const uint key = compute_hash_key(position.xyz);
    if(skip_block(key)) return;

    if(box_in_frustum_test(frustum, world_position.xyz)) {
        uint index = atomicAdd(counters.blocks, 1);
        block[index].aabb = position.xyz;

        const float distance_to_cam =  computeDistanceToCamera(world_position);
        distance_to_camera[1].data[index] = floatBitsToUint(distance_to_cam);
    }
}