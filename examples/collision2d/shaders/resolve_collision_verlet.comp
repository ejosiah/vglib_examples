#version 460

#include "shared.glsl"

struct LocalData{
    vec2 position;
    uint controlBits;
    uint index;
    uint cell;
    int pass;
    bool previousPassUpdate;
    bool updated;
};


layout(local_size_x = 256) in;

layout(set = 1, binding = 0) buffer Positions {
    vec2 positions[];
};

layout(set = 1, binding = 2) buffer Radius {
    float radius[];
};

layout(set = 1, binding = 3) buffer Colors {
    vec4 colors[];
};

layout(set = 1, binding = 4) buffer CellId {
    uint cellID[];
};

layout(set = 1, binding = 5) buffer Attributes {
    Attribute attributes[];
};

layout(set = 1, binding = 7) buffer CellIndexArray {
    CellInfo cellIndices[];
};

layout(set = 2, binding = 1) buffer BitSet {
    uint bitSet[];
};

layout(push_constant) uniform Constants {
    int pass;
};

uvec3 gridSize = gl_NumWorkGroups * gl_WorkGroupSize;
uint gid = gl_GlobalInvocationID.y * gridSize.x + gl_GlobalInvocationID.x;

float r = global.radius;
float _2r = r + r;
float rr = _2r * _2r;
float restitution = 0.75;
float inverseMass = 1;

LocalData local[100];
int numCollisions;

vec4 passColor[4] = vec4[4](vec4(1, 0, 0, 1), vec4(0, 1, 0, 1), vec4(0, 0, 1, 1), vec4(1, 1, 0, 1));

void resolveCollision(inout LocalData a, inout LocalData b, vec2 dir, float dd, uint pass) {

    float d = sqrt(dd);
    dir /= d;
    
    float corr = 0.5 * (_2r - d) * restitution;
    a.position -= dir * corr;
    b.position += dir * corr;

    a.updated = true;
    b.updated = true;
}

void main() {
    if(gid >= global.numCellIndices) return;

    CellInfo info = cellIndices[gid];

    if(info.numCells == 1){

//        if(countCellIntersections(attributes[info.index].controlBits) > 1){
//            colors[attributes[info.index].objectID] = vec4(1, 0.5, 0, 1);
//        }else{
//            colors[attributes[info.index].objectID] = vec4(1);
//        }
        return;
    }

    const uint passCellType = 1u << pass;
    const uint homeCellType = HOME_CELL_TYPE(attributes[info.index].controlBits);

    if(passCellType != homeCellType) return;

    uint start = info.index;
    uint end = start + info.numCells;

    for(uint i = start; i < end; ++i){
        LocalData data;
        data.controlBits = attributes[i].controlBits;
        data.index = attributes[i].objectID;
        data.position = positions[data.index];
        data.updated = false;
        data.pass = -1;
        data.cell = cellID[i];
        local[i - start] = data;
//        colors[data.index] = vec4(1);
    }

    for(int i = 0; i < info.numHomeCells; ++i){
        LocalData a = local[i];
        for(int j = i + 1; j < info.numCells; ++j){
            if(i == j) continue;
            LocalData b = local[j];

//            colors[local[i].index] = vec4(1);
//            colors[local[j].index] = vec4(1);

            if(SHARE_COMMON_CELLS(a.controlBits, b.controlBits) && !b.previousPassUpdate){
                vec2 d = b.position - a.position;
                float dd = dot(d, d);
                if(dd != 0 && dd < rr) {
                    resolveCollision(local[i], local[j], d, dd, pass);
                }
                local[i].pass = pass;
                local[j].pass = pass;
//                colors[local[i].index] = passColor[local[i].pass];
//                colors[local[j].index] = passColor[local[j].pass];
            }
        }
    }

    for(int i = 0; i < info.numCells; ++i) {
        if(local[i].updated) {
            positions[local[i].index] = local[i].position;
            bitSet[local[i].index] = 1;
        }
//        if(local[i].pass != -1) {
//            colors[local[i].index] = passColor[local[i].pass];
//        }
    }

}