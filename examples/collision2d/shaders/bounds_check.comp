#version 460

#include "shared.glsl"

layout(local_size_x = 256) in;

layout(set = 1, binding = 0) buffer Positions {
    vec2 positions[];
};

layout(set = 1, binding = 1) buffer Velocity {
    vec2 velocity[];
};

layout(set = 1, binding = 2) buffer Radius {
    float radius[];
};

uvec3 gridSize = gl_NumWorkGroups * gl_WorkGroupSize;
uint gid = gl_GlobalInvocationID.y * gridSize.x + gl_GlobalInvocationID.x;

void main() {
    if(gid >= global.numObjects) return;

    vec2 p = positions[gid];
    vec2 v = velocity[gid];
    float r = global.radius;


    Domain newDomain = shrink(global.domain, r);
    vec2 min = newDomain.lower;
    vec2 max = newDomain.upper;
    float rest = 1; // Restitution

    vec2 n = vec2(0);
    if(p.x < min.x){
        p.x = min.x;
        v.x *= -rest;
    }
    if(p.x > max.x){
        p.x = max.x;
        v.x *= -rest;
    }
    if(p.y < min.y){
        p.y = min.y;
        v.y *= -rest;
    }
    if(p.y > max.y){
        p.y = max.y;
        v.y *= -rest;
    }

    positions[gid] = p;
    velocity[gid] = v;
}