#version 460 core

layout(local_size_x = 10, local_size_y = 10) in;

#include "shared.glsl"

layout(set = 0, binding = 0) buffer POINT_MASSES_IN{
    vec4 particleIn[];
};

layout(set = 1, binding = 0) buffer POINT_MASS_OUT{
    vec4 particleOut[];
};


bool neighbour(int i, out vec3 pos, out vec3 prev_pos, out float ks, out float kd, out float rest_length){
    ivec2 coord;
    int nid;
    if(!neighbour(i, nid, coord)){
        return false;
    }

    pos = particleIn[nid].xyz;
    prev_pos = particleOut[nid].xyz;

    rest_length = length(coord * inv_cloth_size);
    if(i < 4){
        ks = ksStruct;
        kd = kdStruct;
    }else if(i < 8){
        ks = ksShear;
        kd = kdShear;
    }else if(i < 12){
        ks = ksBend;
        kd = kdBend;
    }

    return true;
}

void main(){
    //    float dt = 0.00083;
    float dt = timeStep;
    float inv_dt = 1/dt;
    vec3 pos = particleIn[id].xyz;
    vec3 prev_pos = particleOut[id].xyz;
    vec3 velocity = (pos - prev_pos) * inv_dt;

    vec3 force = mass * gravity + kd * -velocity;

    for(int i = 0; i < 12; i++){
        vec3 nPos;
        vec3 nPrev_pos;
        float ks;
        float kd;
        float l0;

        if(!neighbour(i, nPos, nPrev_pos, ks, kd, l0)){
            continue;
        }

        vec3 d = nPos - pos;
        float l1 = length(d);
        d /= l1;
        vec3 nVelocity = (nPos - nPrev_pos) * inv_dt;

        vec3 f = d * (ks * (l1 - l0) + kd * dot(nVelocity - velocity, d));

        force += f;
    }

    float inv_mass = 1.0f/mass;
    if(id == (numPoints - width) || id == (numPoints - 1)){
        inv_mass = 0;
    }

    vec3 a = force * inv_mass;

    vec3 p = 2 * pos - prev_pos + a * dt * dt;

    particleOut[id] = vec4(p, 1);
}