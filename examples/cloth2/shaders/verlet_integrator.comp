#version 460
#extension GL_EXT_ray_query : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable

#define COLLISION_MARGIN 0.01

layout(local_size_x = 10, local_size_y = 10) in;

#include "shared.glsl"
#include "ray_query_lang.glsl"


layout(set = 0, binding = 0) buffer POINT_MASSES_IN{
    vec4 positions1[];
};

layout(set = 1, binding = 0) buffer POINT_MASS_OUT{
    vec4 positions0[];
};

layout(set = 2, binding = 0) buffer LEVEL_SET_GEOMETRY {
    mat4 worldSpaceXform;
    mat4 localSpaceXform;
    vec3 center;
    float radius;
} geometry;

layout(set = 3, binding = 0) uniform accelerationStructure tlas;

layout(set = 3, binding = 1) buffer VERTEX_BUFFER {
    Vertex v[];
} vertices[];

layout(set = 3, binding = 2) buffer INDEX_BUFFER {
    int i[];
} indices[];

layout(set = 3, binding = 3) buffer VETEX_OFFSETS {
    VertexOffsets vo[];
} offsets[];

bool neighbour(int i, out vec3 pos, out vec3 prev_pos, out float ks, out float kd, out float rest_length){
    ivec2 coord;
    int nid;
    if(!neighbour(i, nid, coord)){
        return false;
    }

    pos = positions1[nid].xyz;
    prev_pos = positions0[nid].xyz;

    rest_length = length(coord * inv_cloth_size);
    if(i < 4){
        ks = ksStruct;
        kd = kdStruct;
    }else if(i < 8){
        ks = ksShear;
        kd = kdShear;
    }else if(i < 12){
        ks = ksBend;
        kd = kdBend;
    }

    return true;
}

float sdBox( vec3 p){
    vec3 q = abs(p) - vec3(1 + COLLISION_MARGIN);
    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

vec3 boxNormal(vec3 p) {
   vec3 pp = abs(p);
   int axis = 0;
    for(int i = 1; i < 3; i++){
        if(pp[i] > pp[axis]) {
            axis = i;
        }
    }

    vec3 N = vec3(0);
    N[axis] = sign(p[axis]);
    vec3 pN = normalize(p);

//    if(abs(dot(N, pN)) <= 1e-4) {
//        N = pN;
//    }
    return N;
}

vec3 offsetRay(in vec3 p, in vec3 n)
{
    const float intScale   = 256.0f;
    const float floatScale = 1.0f / 65536.0f;
    const float origin     = 1.0f / 32.0f;

    ivec3 of_i = ivec3(intScale * n.x, intScale * n.y, intScale * n.z);

    vec3 p_i = vec3(intBitsToFloat(floatBitsToInt(p.x) + ((p.x < 0) ? -of_i.x : of_i.x)),
    intBitsToFloat(floatBitsToInt(p.y) + ((p.y < 0) ? -of_i.y : of_i.y)),
    intBitsToFloat(floatBitsToInt(p.z) + ((p.z < 0) ? -of_i.z : of_i.z)));

    return vec3(abs(p.x) < origin ? p.x + floatScale * n.x : p_i.x, //
    abs(p.y) < origin ? p.y + floatScale * n.y : p_i.y, //
    abs(p.z) < origin ? p.z + floatScale * n.z : p_i.z);
}

vec3 closestPointOnPlane(vec3 p, vec3 N, float d) {
    float t = dot(N, p) - d;
    return p - t * N;
}

void collisionMesh(inout vec3 prev_pos, inout vec3 pos) {
   vec3 p0 = (geometry.localSpaceXform * vec4(prev_pos, 1)).xyz;
   vec3 p1 = (geometry.localSpaceXform * vec4(pos, 1)).xyz;
    vec3 origin = p1;
    vec3 dir =  p0 - p1;
    float tmin = 0;
    float tmax = 10;
    rayQuery rQuery;
    rayQueryInitializeEXT(rQuery, tlas, gl_RayFlagsOpaque, 0xFF, origin, tmin, dir, tmax);
    while(rayQueryProceed(rQuery)){ }

    const float t = rayQueryGetIntersectionT(rQuery, true);
    if(t == tmax) return ;

    vec3 barryCenter = vec3(0, rayQueryGetIntersectionBarycentricsEXT(rQuery, true));
    float u = 1 - barryCenter.x - barryCenter.y;
    float v = barryCenter.x;
    float w = barryCenter.y;

    int customIndex = rayQueryGetIntersectionInstanceCustomIndex(rQuery, true);
    VertexOffsets offset = offsets[0].vo[customIndex];

    int primitiveIndex = rayQueryGetIntersectionPrimitiveIndex(rQuery, true);
    ivec3 index = ivec3(
        indices[0].i[offset.firstIndex + 3 * primitiveIndex + 0],
        indices[0].i[offset.firstIndex + 3 * primitiveIndex + 1],
        indices[0].i[offset.firstIndex + 3 * primitiveIndex + 2]
    );

    Vertex v0 = vertices[0].v[index.x + offset.vertexOffset];
    Vertex v1 = vertices[0].v[index.y + offset.vertexOffset];
    Vertex v2 = vertices[0].v[index.z + offset.vertexOffset];

    vec3 e0 = v1.position.xyz - v0.position.xyz;
    vec3 e1 = v2.position.xyz - v0.position.xyz;

    vec3 N = normalize(v0.normal * u + v1.normal * v + v2.normal * w);



    float pd = dot(N, dir * t);
    vec3 hit = offsetRay(origin + N * (pd + 0.005), N);
//    vec3 hit = (v0.position * u + v1.position * v + v2.position * w).xyz;
//    hit = offsetRay(origin + N * (pd + 0.005), N);

    pos = (geometry.worldSpaceXform * vec4(hit, 1)).xyz;
    prev_pos = pos;
}

void collisionTest(inout vec3 prev_pos, inout vec3 pos) {

    if(collider == 0){
        vec3 p = (geometry.localSpaceXform * vec4(pos, 1)).xyz; // bring into sphere local space
        float d = length(p) - 1;
        if (d < COLLISION_MARGIN) {
            vec3 N = normalize(p);
            p = N + N * COLLISION_MARGIN;
            pos = (geometry.worldSpaceXform * vec4(p, 1)).xyz;
            prev_pos = pos;
        }
    }else if(collider == 1) {
        vec3 p = (geometry.localSpaceXform * vec4(pos, 1)).xyz; // bring into sphere local space
        float d = sdBox(p);
        if(d < COLLISION_MARGIN) {
            vec3 N = boxNormal(p);
            p = p + N * (abs(d) + 0.000);
            pos = (geometry.worldSpaceXform * vec4(p, 1)).xyz;
            prev_pos = pos;
        }
    }else if(collider == 2){
        collisionMesh(prev_pos, pos);
    }

    if(pos.y < COLLISION_MARGIN) {
        pos.y = COLLISION_MARGIN;
        prev_pos.y = COLLISION_MARGIN;
    }
}


vec3 calculateNormal(vec3 position){
    ivec2 coord;
    int nid;
    int count = 0;
    vec3 normal = vec3(0);
    for(int i = 1; i <= 4; i++){
        if(!neighbour(i - 1, nid, coord)) continue;
        vec3 A = positions1[nid].xyz - position;

        if(!neighbour(i%4, nid, coord)) continue;
        vec3 B = positions1[nid].xyz - position;
        normal += cross(B, A);
        count++;
    }
    normal /= count;
    return normalize(normal);
}

void main(){
    float dt = timeStep;
    float inv_dt = 1/dt;
    vec3 pos = positions1[id].xyz;
    vec3 prev_pos = positions0[id].xyz;
    vec3 velocity = (pos - prev_pos) * inv_dt;

    vec3 force = mass * gravity + kd * -velocity;

    if(bool(simWind)){
        float t = elapsedTime;
        float f = 2 * TWO_PI * windSpeed;
        float amp = windStrength;
        vec3 N = calculateNormal(pos);
        vec3 wind = vec3(0);
        wind.x = amp * sin((pos.x + 1) * f) * sin((pos.y + t) * f);
        wind.y = amp * sin((pos.y + 1) * f) * sin((pos.z + t) * f);
        wind.z = amp * sin((pos.z + 1) * f) * sin((pos.x + t) * f);
        force += kd * abs(dot(wind - velocity, N));
    }

    for(int i = 0; i < 12; i++){
        vec3 nPos;
        vec3 nPrev_pos;
        float ks;
        float kd;
        float l0;

        if(!neighbour(i, nPos, nPrev_pos, ks, kd, l0)){
            continue;
        }

        vec3 d = nPos - pos;
        float l1 = length(d);
        d /= l1;
        vec3 nVelocity = (nPos - nPrev_pos) * inv_dt;

        vec3 f = d * (ks * (l1 - l0) + kd * dot(nVelocity - velocity, d));

        force += f;
    }

    float inv_mass = 1.0f/mass;
//    if(id == (numPoints - width) || id == (numPoints - 1)){
//        inv_mass = 0;
//    }

    vec3 a = force * inv_mass;

    vec3 p = 2 * pos - prev_pos + a * dt * dt;

    collisionTest(pos, p);

    positions0[id] = vec4(pos, 1);
    positions1[id] = vec4(p, 1);
}