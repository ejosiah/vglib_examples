#version 460

#include "octahedral.glsl"

#ifndef PI
#define PI 3.1415926535897932384626
#endif
#define TWO_PI (PI * 2.0)
#define HALF_PI (PI * 0.5)

layout(local_size_x = 1, local_size_y = 1) in;

layout(set = 0, binding = 0) uniform sampler2D environmentMap;
layout(set = 1, binding = 0, rgba32f) uniform image2D convolutedEnvMap;

layout(push_constant) uniform Constants{
    float roughness;
};

float RadicalInverse_VdC(uint bits);
vec2 hammersley(uint i, uint N);
vec3 importanceSampleCharlie(vec2 Xi, vec3 N, float roughness, out float pbf);
vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness, out float pdf);
float computeLod(float pdf);


const uint SAMPLE_COUNT = 64;

vec4 compute(vec2 uv){
    vec3 N = octDecode(2 * uv - 1);
    vec3 R = N;
    vec3 V = R;
    vec3 color = texture(environmentMap, uv).rgb;
    float totalWeight = 0.0;
    vec3 prefilteredColor = vec3(0.0);

    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        float pdf;
        vec2 Xi = hammersley(i, SAMPLE_COUNT);
        vec3 H  = importanceSampleGGX(Xi, N, roughness, pdf);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float lod = computeLod(pdf);

        float NdotL = max(dot(N, L), 0.0);
        if(NdotL > 0.0)
        {
            vec2 uv = octEncode(normalize(L)) * 0.5 + 0.5;
            prefilteredColor += textureLod(environmentMap, uv, lod).rgb * NdotL;
            totalWeight      += NdotL;
        }
    }
    prefilteredColor = prefilteredColor / totalWeight;

    return vec4(prefilteredColor, 1);
}


void main(){
    vec2 uv = vec2(vec2(gl_GlobalInvocationID) + 0.5)/vec2(gl_NumWorkGroups * gl_WorkGroupSize);
    vec4 result = compute(uv);
    imageStore(convolutedEnvMap, ivec2(gl_GlobalInvocationID), result);
}

float RadicalInverse_VdC(uint bits){
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint i, uint N){
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

float D_Charlie(float sheenRoughness, float NdotH)
{
    sheenRoughness = max(sheenRoughness, 0.000001); //clamp (0,1]
    float invR = 1.0 / sheenRoughness;
    float cos2h = NdotH * NdotH;
    float sin2h = 1.0 - cos2h;
    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * PI);
}

vec3 importanceSampleCharlie(vec2 Xi, vec3 N, float roughness, out float pdf){
    float a = roughness*roughness;

    float alpha = roughness * roughness;
    float sinTheta = pow(Xi.y, alpha / (2.0*alpha + 1.0));
    float cosTheta = sqrt(1.0 - sinTheta * sinTheta);
    float phi = 2.0 * PI * Xi.x;
    pdf = D_Charlie(alpha, cosTheta) / 4.0;

    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return sampleVec;
}

vec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness, out float pdf)
{
    float a = roughness*roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);

    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

// Mipmap Filtered Samples (GPU Gems 3, 20.4)
// https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling
// https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf
float computeLod(float pdf){
    vec2 dim = textureSize(environmentMap, 0);
    // // Solid angle of current sample -- bigger for less likely samples
    // float omegaS = 1.0 / (float(u_sampleCount) * pdf);
    // // Solid angle of texel
    // // note: the factor of 4.0 * MATH_PI
    // float omegaP = 4.0 * MATH_PI / (6.0 * float(u_width) * float(u_width));
    // // Mip level is determined by the ratio of our sample's solid angle to a texel's solid angle
    // // note that 0.5 * log2 is equivalent to log4
    // float lod = 0.5 * log2(omegaS / omegaP);

    // babylon introduces a factor of K (=4) to the solid angle ratio
    // this helps to avoid undersampling the environment map
    // this does not appear in the original formulation by Jaroslav Krivanek and Mark Colbert
    // log4(4) == 1
    // lod += 1.0;

    // We achieved good results by using the original formulation from Krivanek & Colbert adapted to cubemaps

    // https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf
    float lod = 0.5 * log2( 6.0 * float(dim.x) * float(dim.x) / (float(SAMPLE_COUNT) * pdf));


    return lod;
}