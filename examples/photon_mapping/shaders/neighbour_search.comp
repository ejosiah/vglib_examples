#version 460

#define NUM_NEIGHBOURS 1000

#define EXTERNAL_QUEUE_MEMORY
#include "photon.glsl"

shared PhotonComp queueData[NUM_NEIGHBOURS];

layout(local_size_x = 1) in;

layout(set = 0, binding = 1, std430) buffer GENERATED_PHOTONS {
    Photon photons[];
};

layout(set = 0, binding = 2) buffer PHOTON_STATS {
    int photonCount;
    int treeSize;
};

layout(set = 0, binding = 3) buffer TreeIndex {
    int tree[];
};

layout(set = 1, binding = 0) buffer DebugData {
    mat4 transform;

    vec3 hitPosition;
    float radius;

    vec3 target;
    int mode;

    vec3 cameraPosition;
    int meshId;

    vec3 pointColor;
    int numNeighboursFound;

    float pointSize;
    int searchMode;
    int numNeighbours;
};

layout(set = 1, binding = 1) buffer SearchResults {
    int searchResults[];
};


#include "neighbour_search.glsl"


void main() {
    Queue result = createQueue(numNeighbours);
    nearestNeighbourSearch(result, hitPosition, radius, numNeighboursFound);
}