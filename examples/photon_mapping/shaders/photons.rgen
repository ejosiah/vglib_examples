#version 460
#extension GL_EXT_ray_tracing : require

#include "ray_tracing_lang.glsl"
#include "rt_constants.glsl"
#include "random.glsl"
#include "sampling.glsl"
#include "structs.glsl"
#include "util.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(set = 3, binding = 0) buffer LIGHT {
    Light light;
};

layout(set = 3, binding = 1, std430) buffer GENERATED_PHOTONS {
    Photon photons[];
};

layout(set = 3, binding = 2) buffer PHOTON_STATS {
    int photonCount;
    int treeSize;
};

layout(push_constant) uniform PhotoMapInfo {
    uint mask;
    uint maxBounces;
    uint numPhotons;
    uint neighbourCount;
    float searchDistance;
};

layout(location = 0) rayPayload PhotonGenParams pgParams;

int size = 0;
Photon localPhotons[100]; // size


void main(){
    vec3 dim = (light.upperCorner - light.lowerCorner);

    uint N = gl_LaunchSize.x;
    uint i = gl_LaunchID.x;
    vec2 xi = hammersley(i , N);

    pgParams.rngState = initRNG(xi, vec2(1024, 700), i);
    vec3 direction = cosineSampleHemisphere(randomVec2(pgParams.rngState));

    mat3 TBN = mat3(light.tangent, light.bitangent, light.normal);

    pgParams.bounceRay.origin = light.lowerCorner + dim * vec3(xi.x, 0, xi.y);
    pgParams.bounceRay.direction = normalize(TBN * direction);
    pgParams.bounceRay.tMin = 0;
    pgParams.bounceRay.tMax = 10000;


    vec3 throughput = light.power / float(N);
    Ray ray = pgParams.bounceRay;

    for(int bounce = 0; bounce < maxBounces; bounce++){
        traceRay(topLevelAS, gl_RayFlagsNoOpaque, mask, PHOTON_HIT_GROUP, 0, PHOTON_MISS, ray.origin, ray.tMin, ray.direction, ray.tMax, 0);

        throughput *= pgParams.reflectivity;

        if(isBlack(throughput)) {
            break;
        }

        if(pgParams.diffuse) {
            Photon photon;
            photon.position = vec4(pgParams.position, 1);
            photon.direction.xyz = -ray.direction;
            photon.power.xyz = throughput;
            localPhotons[size] = photon;
            size++;
        }

        ray = pgParams.bounceRay;
    }

    int offset = atomicAdd(photonCount, size);
    for(int i = 0; i < size; i++){
        photons[offset + i] = localPhotons[i];
    }

}