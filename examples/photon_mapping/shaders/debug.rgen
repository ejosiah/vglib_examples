#version 460
#extension GL_EXT_ray_tracing : require

#include "ray_tracing_lang.glsl"
#include "rt_constants.glsl"
#include "structs.glsl"

#define SEARCH_MODE_POSITION 0
#define SEARCH_MODE_POSITION_FOUND 1
#define SEARCH_MODE_AREA 2

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;

layout(set = 4, binding = 0) buffer DebugData {
    mat4 transform;

    vec3 hitPosition;
    float radius;

    vec3 target;
    int mode;

    vec3 cameraPosition;
    int meshId;

    vec3 pointColor;
    int numNeighboursFound;

    float pointSize;
    int searchMode;
    int numNeighbours;
};

layout(push_constant) uniform PhotoMapInfo {
    uint mask;
    uint maxBounces;
    uint numPhotons;
    uint neighbourCount;
    float searchDistance;
};


layout(location = 0) rayPayload HitRecord hit;

mat4 translate(mat4 m, vec3 v) {
    mat4 result = m;
    result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
    return result;
}

void main() {
//    if(mode != SEARCH_MODE_POSITION || mode != SEARCH_MODE_AREA) return;
    Ray ray = Ray(cameraPosition, normalize(target - cameraPosition), 0, 1000);

    traceRay(topLevelAS, gl_RayFlagsNoOpaque, mask, DEBUG_HIT_GROUP, 0, DEBUG_MISS, ray.origin, ray.tMin, ray.direction, ray.tMax, 0);

    if (hit.hit) {
        if(mode == SEARCH_MODE_POSITION) {
            hitPosition = hit.position;
            transform =  translate(mat4(1), hitPosition) *  mat4(hit.TBN) * translate(mat4(1), -hitPosition);
            meshId = hit.meshId;
            mode = SEARCH_MODE_AREA;
        }else if(mode == SEARCH_MODE_AREA) {
            radius = distance(hitPosition, hit.position);
        }
    }

}