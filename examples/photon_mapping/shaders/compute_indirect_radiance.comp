#version 460

#include "photon.glsl"

layout(local_size_x = 1, local_size_y = 1) in;

layout(set = 0, binding = 0, rgba32f) uniform image2D colorImage;
layout(set = 0, binding = 1, rgba32f) uniform image2D positionImage;
layout(set = 0, binding = 2, rgba32f) uniform image2D normalImage;
layout(set = 0, binding = 3, rgba32f) uniform image2D indirectRadiance;

layout(set = 1, binding = 1, std430) buffer GENERATED_PHOTONS {
    Photon photons[];
};

layout(set = 1, binding = 2) buffer PHOTON_STATS {
    int photonCount;
    int treeSize;
};

layout(set = 1, binding = 3) buffer TreeIndex {
    int tree[];
};

layout(push_constant) uniform Constants {
    int iteration;
    int iWidth;
    int iHeight;
    int blockSize;
    float radius;
};


int searchResults[61];

#include "neighbour_search.glsl"

void main(){
    int row = (iteration * blockSize)/iWidth;
    int col = iteration % (iWidth/blockSize);
    ivec2 idx = ivec2(gl_GlobalInvocationID.xy);

    idx.x += col * blockSize;
    idx.y += row * blockSize;

    vec4 color = imageLoad(colorImage, idx);

    if(color.a == 0) {
        imageStore(indirectRadiance, idx, vec4(0));
        return;
    }

    vec3 diffuse = color.rgb;
    vec3 position = imageLoad(positionImage, idx).xyz;
    vec3 normal = imageLoad(normalImage, idx).xyz;

    int n;
    Queue result = createQueue(60);
    nearestNeighbourSearch(result, position, radius, n);

    const float INV_PI_R2 = 1/(3.1415 * radius * radius);
    vec3 radiance = vec3(0);

    vec3 N = normalize(normal);
    for(int i = 0; i < n; i++){
        Photon photon = photons[searchResults[i]];
        vec3 L = normalize(-photon.direction);
        radiance += diffuse * max(0, dot(N, L)) * photon.power.rgb;
    }
    radiance *= INV_PI_R2;

    imageStore(indirectRadiance, idx, vec4(radiance, 1));
}