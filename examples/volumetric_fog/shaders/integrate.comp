#version 460

#extension GL_EXT_nonuniform_qualifier : enable

#include "fog_constants.glsl"

#define RADIANCE_API_ENABLED

#define FOG_SET 0
#define SCENE_SET 1
#define ATMOSPHERE_PARAMS_SET 2
#define ATMOSPHERE_LUT_SET 3
#define LIGHT_CONTRIB_TEXTURE_ID 6

#define LIGHT_CONTRIB_IMAGE_ID nonuniformEXT(scene.frame % 2 == 0 ?  LIGHT_CONTRIB_IMAGE_PING_ID : LIGHT_CONTRIB_IMAGE_PONG_ID)

#define LIGHT_CONTRIB_IMAGE globalImages3d[LIGHT_CONTRIB_IMAGE_ID]
#define LIGHT_SCATTERING_IMAGE globalImages3d[nonuniformEXT(LIGHT_SCATTERING_IMAGE_ID)]

#include "atmosphere_api.glsl"
#include "scene.glsl"
#include "fog.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout(set = 4, binding = 10)  uniform sampler3D globalTextures3d[];
layout(set = 4, binding = 11, rgba32f)  uniform image3D globalImages3d[];

ivec3 froxelCoord = ivec3(gl_GlobalInvocationID);

void main() {
    vec3 scattering = vec3(0);
    float transmittance = 1;
    float zCurrent = 0;
    ivec3 fCoord = froxelCoord;

    const int zDim = fog.froxelDim.z;
    for(int z = 0; z < zDim; ++z){
        fCoord.z = z;
//        float jitter = generateFroxelNoise(fCoord.xy, scene.frame, 0.25);
        float jitter = 0;
        float zNext = sliceToExponentialDepthJittered(scene.znear, scene.zfar, jitter, z + 1, zDim);
        float zStep = abs(zNext - zCurrent);
        zCurrent = zNext;

        const vec4 seSample = imageLoad(LIGHT_CONTRIB_IMAGE, fCoord);
        const vec3 sampledScattering = seSample.rgb;
        const float sampledExtinction = seSample.a;
        const float clampedExtinction = max(sampledExtinction, 0.00001);
        const float T = exp(-sampledExtinction * zStep);
        const vec3 S = (sampledScattering - (sampledScattering * T))/ clampedExtinction;

        scattering += S * transmittance;
        transmittance *= T;

        imageStore(LIGHT_SCATTERING_IMAGE, fCoord, vec4(scattering, transmittance));
    }
}