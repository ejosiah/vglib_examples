#version 460
#extension GL_EXT_nonuniform_qualifier : require

#include "fog_constants.glsl"

#define FOG_SET 0
#define SCENE_SET 1
#define VOLUME_NOISE_TEXTURE_ID 9
#define VOLUME_TEXTURE_ID 10

#define VOLUME_NOISE_TEXTURE globalTextures3d[VOLUME_NOISE_TEXTURE_ID]
#define VOLUME_TEXTURE globalTextures3d[VOLUME_TEXTURE_ID]
#define FOG_DATA globalImages3d[nonuniformEXT(FOG_DATA_IMAGE_ID)]

#include "fog.glsl"
#include "scene.glsl"

vec4 constantFog(float noise);
vec4 heightFog(vec3 pos, float noise);
vec4 boxFog(vec3 pos, float noise);

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 2, binding = 10) uniform sampler3D globalTextures3d[];
layout(set = 2, binding = 11, rgba32f) writeonly uniform image3D globalImages3d[];

ivec3 froxelCoord = ivec3(gl_GlobalInvocationID);

void main() {
    vec3 pos = worldFromFroxel(froxelCoord);
    vec3 sampleCoord = pos + fog.volumeNoisePositionScale + vec3(1, 0.1, 2) * scene.time * fog.volumeNoiseSpeedScale;

    float noise = texture(VOLUME_NOISE_TEXTURE, sampleCoord).r;

    vec4 scatteringExtinction = constantFog(noise) + heightFog(pos, noise) + boxFog(pos, noise);
    imageStore(FOG_DATA, froxelCoord, scatteringExtinction);
}

vec4 constantFog(float noise) {
    float density = fog.constantDensity * noise;
    return scatteringExtinctionFromColorDensity(FOG_COLOR, density);
}

vec4 heightFog(vec3 pos, float noise) {
    float h = max(0, pos.y);
    float density = fog.heightFogDensity * exp(-fog.heightFogFalloff * h) * noise;
    return scatteringExtinctionFromColorDensity(FOG_COLOR, density);
}

vec4 boxFog(vec3 pos, float noise) {
    vec3 localPos = (fog.inverseVolumeTransform * vec4(pos, 1)).xyz;
    bool insideVolume = all(greaterThanEqual(localPos, vec3(0))) && all(lessThanEqual(localPos, vec3(1)));
    if(insideVolume){
        float density = texture(VOLUME_TEXTURE, localPos).r;
        return scatteringExtinctionFromColorDensity(FOG_COLOR, density);
    }

//    bool insideVolume = all(greaterThanEqual(pos, fog.boxMin)) && all(lessThanEqual(pos, fog.boxMax));
//    if(insideVolume){
//        vec3 sampleCoord = remap(pos, fog.boxMin, fog.boxMax, vec3(0), vec3(1));
//        float density = texture(VOLUME_TEXTURE, sampleCoord).r;
//        return scatteringExtinctionFromColorDensity(FOG_COLOR, density);
//    }
    return vec4(0);
}