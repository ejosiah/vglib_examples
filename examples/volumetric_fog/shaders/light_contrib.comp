#version 460

#define RADIANCE_API_ENABLED

#define FOG_SET 0
#define SCENE_SET 1
#define ATMOSPHERE_PARAMS_SET 2
#define ATMOSPHERE_LUT_SET 3
#define SHADOW_MAP_SET 4

#include "atmosphere_api.glsl"
#include "scene.glsl"
#include "fog.glsl"
#include "shadow_map.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = FOG_SET, binding = 5, rgba32f) uniform image3D iLightContribution;

ivec3 froxelCoord = ivec3(gl_GlobalInvocationID);

void main() {
    vec3 pos = worldFromFroxel(froxelCoord);
    vec4 lightSpacePos = scene.lightViewProjection * vec4(pos, 1);
    vec4 scatteringExtinction = texelFetch(fogData, froxelCoord, 0);

    vec3 scattering = scatteringExtinction.rgb;
    float extinction = scatteringExtinction.a;

    vec3 L = normalize(scene.sunDirection);
    vec3 V = normalize(scene.camera - pos);
    vec3 H = normalize(L + V);

    float visibility = 1 - shadowCalculation(lightSpacePos);


    vec3 radiance =  visibility * ATMOSPHERE.solar_irradiance/PI;

    float phaseFn = phaseHG(dot(L, V), fog.g);
    vec3 scatteredLight = scattering * phaseFn * radiance;
    imageStore(iLightContribution, froxelCoord, vec4(scatteredLight, extinction));
}